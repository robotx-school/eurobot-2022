// Generated by SolidPython 1.1.1 on 2021-10-14 00:25:29
$fn = 100;


union() {
	difference() {
		cube(size = [200, 200, 4]);
		translate(v = [-1, -1, -1]) {
			cube(size = [5, 21, 6]);
		}
		translate(v = [196, -1, -1]) {
			cube(size = [5, 21, 6]);
		}
		union() {
			translate(v = [-1, 40, -1]) {
				cube(size = [5, 20, 6]);
			}
			translate(v = [196, 40, -1]) {
				cube(size = [5, 20, 6]);
			}
		}
		union() {
			translate(v = [-1, 80, -1]) {
				cube(size = [5, 20, 6]);
			}
			translate(v = [196, 80, -1]) {
				cube(size = [5, 20, 6]);
			}
		}
		union() {
			translate(v = [-1, 120, -1]) {
				cube(size = [5, 20, 6]);
			}
			translate(v = [196, 120, -1]) {
				cube(size = [5, 20, 6]);
			}
		}
		union() {
			translate(v = [-1, 160, -1]) {
				cube(size = [5, 20, 6]);
			}
			translate(v = [196, 160, -1]) {
				cube(size = [5, 20, 6]);
			}
		}
	}
	union() {
		rotate(a = [90, 0, 90]) {
			color(alpha = 1.0000000000, c = "orange") {
				difference() {
					translate(v = [-2, 0, 0]) {
						union() {
							linear_extrude(height = 4) {
								difference() {
									circle(r = 50);
									rotate(a = 90) {
										translate(v = [0, -50, 0]) {
											square(center = true, size = [150, 100]);
										}
									}
									rotate(a = -45) {
										translate(v = [0, -50, 0]) {
											square(center = true, size = [150, 100]);
										}
									}
								}
							}
							cube(size = [202, 50, 4]);
						}
					}
					rotate(a = -90) {
						translate(v = [-4, 180, -1]) {
							cube(size = [5, 21, 6]);
						}
					}
					rotate(a = -90) {
						translate(v = [-4, 20, -1]) {
							cube(size = [5, 20, 6]);
						}
					}
					rotate(a = -90) {
						translate(v = [-4, 60, -1]) {
							cube(size = [5, 20, 6]);
						}
					}
					rotate(a = -90) {
						translate(v = [-4, 100, -1]) {
							cube(size = [5, 20, 6]);
						}
					}
					rotate(a = -90) {
						translate(v = [-4, 140, -1]) {
							cube(size = [5, 20, 6]);
						}
					}
				}
			}
		}
		translate(v = [196, 0, 0]) {
			rotate(a = [90, 0, 90]) {
				color(alpha = 1.0000000000, c = "orange") {
					difference() {
						translate(v = [-2, 0, 0]) {
							union() {
								linear_extrude(height = 4) {
									difference() {
										circle(r = 50);
										rotate(a = 90) {
											translate(v = [0, -50, 0]) {
												square(center = true, size = [150, 100]);
											}
										}
										rotate(a = -45) {
											translate(v = [0, -50, 0]) {
												square(center = true, size = [150, 100]);
											}
										}
									}
								}
								cube(size = [202, 50, 4]);
							}
						}
						rotate(a = -90) {
							translate(v = [-4, 180, -1]) {
								cube(size = [5, 21, 6]);
							}
						}
						rotate(a = -90) {
							translate(v = [-4, 20, -1]) {
								cube(size = [5, 20, 6]);
							}
						}
						rotate(a = -90) {
							translate(v = [-4, 60, -1]) {
								cube(size = [5, 20, 6]);
							}
						}
						rotate(a = -90) {
							translate(v = [-4, 100, -1]) {
								cube(size = [5, 20, 6]);
							}
						}
						rotate(a = -90) {
							translate(v = [-4, 140, -1]) {
								cube(size = [5, 20, 6]);
							}
						}
					}
				}
			}
		}
	}
	union() {
		translate(v = [0, 0, 4]) {
			rotate(a = [135, 0, 0]) {
				translate(v = [4, 0, 0]) {
					difference() {
						cube(size = [192, 50, 4]);
						translate(v = [48.0000000000, 11.5000000000, 0]) {
							hull() {
								union() {
									translate(v = [5, 5, -1]) {
										translate(v = [0, 0, 0]) {
											cylinder(h = 6, r = 5);
										}
									}
									translate(v = [5, 5, -1]) {
										translate(v = [86, 0, 0]) {
											cylinder(h = 6, r = 5);
										}
									}
									translate(v = [5, 5, -1]) {
										translate(v = [0, 17, 0]) {
											cylinder(h = 6, r = 5);
										}
									}
									translate(v = [5, 5, -1]) {
										translate(v = [86, 17, 0]) {
											cylinder(h = 6, r = 5);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		translate(v = [0, 0, 4]) {
			rotate(a = [45]) {
				translate(v = [52.0000000000, -4, 11.5000000000]) {
					color(alpha = 1.0000000000, c = "orange") {
						union() {
							translate(v = [5, 4, 5]) {
								hull() {
									union() {
										translate(v = [0, 0, 0]) {
											rotate(a = [90, 0, 0]) {
												cylinder(h = 4, r = 5);
											}
										}
										translate(v = [86, 0, 0]) {
											rotate(a = [90, 0, 0]) {
												cylinder(h = 4, r = 5);
											}
										}
										translate(v = [0, 0, 17]) {
											rotate(a = [90, 0, 0]) {
												cylinder(h = 4, r = 5);
											}
										}
										translate(v = [86, 0, 17]) {
											rotate(a = [90, 0, 0]) {
												cylinder(h = 4, r = 5);
											}
										}
									}
								}
							}
							translate(v = [19.5000000000, 4, 3.0000000000]) {
								cube(size = [57, 16, 21]);
							}
							translate(v = [13.5000000000, 13, 13.5000000000]) {
								rotate(a = [90, 0, 0]) {
									cylinder(h = 9, r = 4);
								}
							}
							translate(v = [82.5000000000, 13, 13.5000000000]) {
								rotate(a = [90, 0, 0]) {
									cylinder(h = 9, r = 4);
								}
							}
						}
					}
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
from solid.utils import *

SEGMENTS = 100
f = 4

front_camera = 0
for i in [[0, 0, 0], [86, 0, 0], [0, 0, 17], [86, 0, 17]]: front_camera += translate(i)(rotate([90, 0, 0])(cylinder(5, 4)))
front_camera = hull()(front_camera)
front_camera_extrude = 0
for i in [[0, 0, 0], [86, 0, 0], [0, 17, 0], [86, 17, 0]]: front_camera_extrude += translate([5, 5, -1])(translate(i)(cylinder(5, f+2)))
front_camera_extrude = hull()(front_camera_extrude)
camera = translate([5, f, 5])(front_camera) + translate([(96-57)/2, 4, (27-21)/2])(cube([57, 16, 21]))
for i in [27/2, 96-27/2]: camera += translate([i, 9+4, 27/2])(rotate([90, 0, 0])(cylinder(4, 9)))
camera = color('orange')(camera)

hole = cube([f+1, 20, f+2])
hole_w_1 = cube([f+1, 21, f+2])
bottom = cube([200, 200, f]) - translate([-1, -1, -1])(hole_w_1) - translate([200-f, -1, -1])(hole_w_1)
for i in range(40, 200, 40): bottom -= translate([-1, i, -1])(hole) + translate([200-f, i, -1])(hole)

front_part = cube([200-f*2, 50, f]) - translate([(200-f*2-96)/2, (50-27)/2, 0])(front_camera_extrude)

side = left(2)(linear_extrude(f)(arc(rad=50, start_degrees=90, end_degrees=135)) + cube([200+2, 50, f])) - rotate(-90)(translate([-f, 180, -1])(hole_w_1))
for i in range(20, 180, 40): side -= rotate(-90)(translate([-f, i, -1])(hole))
side = color('orange')(side)

deg = 45
front_part_w_camera = up(f)(rotate([90+deg, 0, 0])(right(f)(front_part))) + up(f)(rotate([deg])(translate([(200-96)/2, -f, (50-27)/2])(camera)))

result = bottom
result += rotate([90, 0, 90])(side) + right(200-f)(rotate([90, 0, 90])(side))
result += front_part_w_camera

scad_render_to_file(result, 'result.scad', file_header=f'$fn = {SEGMENTS};') 
 
************************************************/
